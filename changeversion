#!/bin/bash

# Change the version of the source code to the supplied value
SHORTNAME=jv
CAPNAME=JV

# Check that a version information was correctly supplied
if [ "$#" -eq "0" ]
then
  echo "Checking current version numbers only..."
  TEST="true"
elif [ "$1" = "bump" ]
then
  echo "Bumping version number..."
  MAJOR=`grep 'set(VERSION_MAJOR' CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'`
  MINOR=`grep 'set(VERSION_MINOR' CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'`
  PATCH=`grep 'set(VERSION_PATCH' CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'`
  echo "Current version is $MAJOR.$MINOR.$PATCH"
  PATCH=$(($PATCH+1))
  echo "New version will be $MAJOR.$MINOR.$PATCH"
  TEST="false"
elif [ "$#" -ne "3" ]
then
  echo "Improper version number supplied (use 'changeversion MAJOR MINOR PATCH', 'bump' to increase patch number, or no args to check existing files)"
  exit 1
else
  MAJOR=$1
  MINOR=$2
  PATCH=$3
  TEST="false"
  echo "Changing version numbers in files (to ${MAJOR}.${MINOR}.${PATCH}..."
fi

# Program (version.h)
if [ "$TEST" = "false" ]
then
  sed -i -e "s/#define ${CAPNAME}VERSION \"[0-9\.]\+\(.*\)\"/#define ${CAPNAME}VERSION \"$MAJOR.$MINOR.$PATCH\"\1/g" src/version.h
fi
echo -n "       version.h (Program Version) : "
grep "#define ${CAPNAME}VERSION" src/version.h | sed -e "s/#define ${CAPNAME}VERSION \"\([0-9a-z\.]\+\).*\"/\1/g"


# CMakeLists.txt
if [ "$TEST" = "false" ]
then
  sed -i -e "s/set(VERSION_MAJOR \"\([0-9\.]\+\)\")/set(VERSION_MAJOR \"$MAJOR\")/g" -e "s/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/set(VERSION_MINOR \"$MINOR\")/g" -e "s/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/set(VERSION_PATCH \"$PATCH\")/g" CMakeLists.txt
fi
echo -n "    CMakeLists.txt (Major Version) : "
grep 'set(VERSION_MAJOR' CMakeLists.txt | sed -e 's/set(VERSION_MAJOR \"\([0-9a-z\.]\+\)\")/\1/g'
echo -n "                   (Minor Version) : "
grep 'set(VERSION_MINOR' CMakeLists.txt | sed -e 's/set(VERSION_MINOR \"\([0-9a-z\.]\+\)\")/\1/g'
echo -n "                   (Patch Version) : "
grep 'set(VERSION_PATCH' CMakeLists.txt | sed -e 's/set(VERSION_PATCH \"\([0-9a-z\.]\+\)\")/\1/g'
echo ""

# configure.ac
echo -n "    configure.ac (Package Version) : "
if [ "$TEST" = "false" ]
then
  sed -i -e "s/m4_define(\[${CAPNAME}_VERSION\],\[\([0-9a-z\.]\+\)\])/m4_define([${CAPNAME}_VERSION],[$MAJOR.$MINOR.$PATCH])/g" configure.ac
fi
grep "m4_define(\[${CAPNAME}_VERSION\]" configure.ac | sed -e "s/m4_define(\[${CAPNAME}_VERSION\],\[\([0-9a-z\.]\+\)\])/\1/g"

# Desktop files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/Version=[0-9\.]*/Version=$MAJOR.$MINOR.$PATCH/g" extra/*.dt
fi
for a in extra/*.dt; do
printf "%34s : " $a
grep "Version=" $a | sed -e "s/Version=\([0-9\.]*\)/\1/g" 
done

# Spec files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/Version: [0-9a-z\.]\+/Version: $MAJOR.$MINOR.$PATCH/g" extra/*/*.spec
fi
cd extra
for a in */*.spec; do
printf "%34s : " $a
grep "Version:" $a | sed -e 's/Version: \([0-9a-z\.]\+\)/\1/g'
done
cd ../

# Debian build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/\(jv[a-z]*\) (\([0-9\.]\+\))/\1 ($MAJOR.$MINOR.$PATCH)/g" extra/*/*/changelog
fi
cd extra
for a in */*/changelog; do
  ver=`grep 'jv[a-z]* (' $a | sed -e 's/jv[a-z]* (\([0-9\.]\+\).*/\1/g'`
  printf  '%34s : %s\n' $a $ver
done
cd ../

# OSX build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/APP_VERSION=\"\([0-9a-z\.]\+\)\"/APP_VERSION=\"$MAJOR.$MINOR.$PATCH\"/g" extra/OSX/*.dmginfo
fi
cd extra
for a in OSX/*.dmginfo; do
  printf "%34s : " $a
  grep 'APP_VERSION=' $a | sed -e 's/APP_VERSION=\"\([0-9a-z\.]\+\)\"/\1/g'
done
cd ../

# Windows build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/#define MyAppVersion \"[0-9\.]*\"/#define MyAppVersion \"$MAJOR.$MINOR.$PATCH\"/g" -e "s/OutputBaseFilename=\([A-Za-z]*\)-[0-9\.]*/OutputBaseFilename=\1-$MAJOR.$MINOR.$PATCH/g" extra/Win32/*.iss
fi
cd extra
for a in Win32/*iss; do
  printf "%24s (Version) : " $a
  grep 'define MyAppVersion' $a | sed -e 's/#define MyAppVersion \"\([0-9\.]*\)\"/\1/g'
  printf "%23s (Filename) : " $a
  grep 'OutputBaseFilename' $a | sed -e 's/OutputBaseFilename=\([A-Za-z]*\)-\([0-9\.]*\)/\2/g'
done
cd ../

# AppImage build files
if [ "$TEST" = "false" ]
then
  sed -i -e "s/Version=[0-9\.]*/Version=$MAJOR.$MINOR.$PATCH/g" extra/appimage/usr/share/applications/com.projectaten.*.desktop
fi
for a in extra/appimage/usr/share/applications/com.projectaten.*.desktop; do
  printf "%34s : " $a
  grep 'Version=' $a | sed -e 's/Version=\([0-9\.]*\)/\1/g'
done

exit 0

